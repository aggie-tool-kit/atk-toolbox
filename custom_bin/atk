require 'atk_toolbox'

def not_yet_implemented()
    puts "Sorry, this feature is still under development"
end

def help_command()
    puts <<-HEREDOC.remove_indent
        #{"help".color_as :key_term}
            #{"examples:".color_as :title} #{'atk help'.color_as :code}
            #{"info:".color_as :title} shows avalible commands

        #{"version".color_as :key_term}
            #{"examples:".color_as :title} #{'atk version'.color_as :code}
            #{"info:".color_as :title} shows the currently installed version
            
        #{"update".color_as :key_term}
            #{"examples:".color_as :title} #{'atk update'.color_as :code}
            #{"info:".color_as :title} this will get you the latest version of the #{'atk'.color_as :code}, #{'project'.color_as :code}, and #{'_'.color_as :code} commands            
        
        #{"run".color_as :key_term}
            #{"examples:".color_as :title}
                #{'atk run https://github.com/jeff-hykin/install-python'.color_as :code}
                #{'atk run jeff-hykin/install-python'.color_as :code}
            #{"info:".color_as :title}
                This command is used execute a remote script (normally for setup)
            #{"format:".color_as :title}
                #{"atk".color_as :code} #{"run".color_as :key_term} #{"<package>".color_as :argument}
            #{"arguments:".color_as :title}
                #{"<package>".color_as :argument} can be:
                    - a URL to any online git repo such as:
                        #{'https://github.com/jeff-hykin/install-python'.color_as :code}
                    - can also be just a github-username/repo-name such as:
                        #{'jeff-hykin/install-python'.color_as :code}

            
        #{"setup".color_as :key_term}
            #{"examples:".color_as :title}
                #{'atk setup jeff-hykin/atk-python'.color_as :code}
                #{'atk setup https://github.com/jeff-hykin/atk-python'.color_as :code}
            #{"info:".color_as :title}
                A command for quickly setting up other people's projects
                It downloads a github repo to the projects folder
                and runs the project (setup) function
            #{"format:".color_as :title}
                #{"atk".color_as :code} #{"setup".color_as :key_term} #{"<project-git-url>".color_as :argument}
        
        #{"uninstall".color_as :key_term}
            #{"examples:".color_as :title} #{'atk uninstall'.color_as :code}
            #{"info:".color_as :title} this command will uninstall atk itself
    HEREDOC
end


if Console.args.length == 0
    puts "This is the ATK command! I'm glad to see you're using it.\nRunning it with no arguments will just get you this message :)"
# if one argument, then act like grep
else
    case Console.args[0]
        when 'help', '--help', '-h'
            help_command()
        when 'version', '--version', '-v'
            puts Atk.version
        when 'update'
            update, *args = Console.args
            ATK.update(*args)
        when 'run'
            command, package, *args = Console.args
            Atk.run(package, args)
        when 'setup'
            command, repo_url, *arguments = Console.args
            Atk.setup(repo_url, arguments)
        when 'uninstall'
            # remove the 3 commands and the home folder
            if Console.yes?("Are you sure you want to uninstall ATK?\nnote: packages/languages install via ATK will still be avalible after ATK is removed")
                puts "Deleting the _ command"
                FS.delete(Console.path_for('_'))
                puts "Deleting the project command"
                FS.delete(Console.path_for('project'))
                puts "Deleting the atk command"
                FS.delete(Console.path_for('atk'))
                puts "Deleting the atk directory"
                FS.delete(Atk.paths[:atk])
                puts "Uninstalling the atk_toolbox ruby gem"
                system 'gem uninstall atk_toolbox'
                puts "\n Uninstall complete"
            end
        else
            puts "I don't recognized that command\nhere's the `atk --help` which might get you what you're looking for:"
            help_command()
    end
    
end
